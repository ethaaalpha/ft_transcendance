version: '3.8'

services:
  geth:
    container_name: geth
    build:
      context: docker/geth
      dockerfile: geth.dockerfile
    env_file: 
      - .env
    volumes:
      - geth:/ethereum/
    networks:
      - pongNetwork
    healthcheck:
      test: ["CMD-SHELL", "python /script/tools.py test"]
      interval: 3s
      timeout: 10s
      retries: 20

  postgresql:
    container_name: postgresql
    image: postgres:16.2-alpine3.19
    environment:
      - POSTGRES_DB=$DB_NAME
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$DB_USER -d $$DB_NAME"]
      interval: 2s
      timeout: 1s
      retries: 10
    env_file:
      - .env
    restart: on-failure
    networks:
      - pongNetwork

  redis:
    container_name: redis
    image: redis:7.2-alpine
    restart: on-failure
    networks:
      - pongNetwork

  daphne:
    container_name: daphne
    platform: linux/x86_64 #because of solc compiler
    build:
      context: docker/daphne
      dockerfile: daphne.dockerfile
    volumes:
      - ./front:/workdir/front/
      - ./back:/workdir/back/
      - media:/usr/share/media
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
      geth:
        condition: service_healthy
    env_file:
      - .env
    restart: on-failure
    networks:
      - pongNetwork

  nginx:
    container_name: nginx
    build:
      context: docker/nginx
      dockerfile: nginx.dockerfile
    env_file:
      - .env
    volumes:
      - media:/usr/share/media
      - ./front:/usr/share/static
      - libs:/usr/share/libs
    ports: 
      - 8080:80
      - 8081:443
    depends_on:
      - daphne
    restart: on-failure
    networks:
      - pongNetwork

networks:
  pongNetwork:
    name: "teamrocket"
    driver: bridge

volumes:
  geth:
    driver: local
  postgres:
    driver: local
  media:
    driver: local
  libs:
    driver: local
